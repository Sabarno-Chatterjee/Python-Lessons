
Standard pattern:

try: [A specific piece of code]
except: [That is the error case]
else: [When the error doesn't occur, i.e the normal case]
finally: This block isn't used as frequently, it defines a block of code to run when the try... except...else block is final. 
The finally block will be executed no matter if the try block raises an error or not. This can be useful to close objects and clean up resources.


Eg:

fruits = ["Apple", "Pear", "Orange"]

def make_pie(index):
    try:
        fruit = fruits[index]
    except IndexError: [Making it specific of IndexError]
        print("Fruit pie")
    else:
        print(fruit + " pie")

make_pie(4)

Eg:

facebook_posts = [
    {'Likes': 21, 'Comments': 2}, 
    {'Likes': 13, 'Comments': 2, 'Shares': 1}, 
    {'Likes': 33, 'Comments': 8, 'Shares': 3}, 
    {'Comments': 4, 'Shares': 2}, 
    {'Comments': 1, 'Shares': 1}, 
    {'Likes': 19, 'Comments': 3}
]

total_likes = 0

for post in facebook_posts:
    try:
        total_likes = total_likes + post['Likes']
    except KeyError:
        pass

print(total_likes)
